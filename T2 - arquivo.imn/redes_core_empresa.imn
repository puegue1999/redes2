node n2 {
    type router
    model PC
    network-config {
	hostname Criador1
	!
	interface eth0
	 ip address 192.0.2.20/24
	 ipv6 address 2001:db8:0::20/64
	!
    }
    canvas c1
    iconcoords {336.0 220.0}
    labelcoords {336.0 252.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPClient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPClient.py
	custom-command TCPClient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.2.21'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n3 {
    type router
    model router
    network-config {
	hostname Router
	!
	interface eth2
	 ip address 192.0.4.1/24
	 ipv6 address 2001:db8:2::1/64
	!
	interface eth1
	 ip address 192.0.3.1/24
	 ipv6 address 2001:db8:1::1/64
	!
	interface eth0
	 ip address 192.0.2.1/24
	 ipv6 address 2001:db8:0::1/64
	!
    }
    canvas c1
    iconcoords {429.0 365.0}
    labelcoords {429.0 397.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n6}
    interface-peer {eth2 n7}
}

node n1 {
    type lanswitch
    network-config {
	hostname CriadorSwitch
	!
    }
    canvas c1
    iconcoords {505.0 222.0}
    labelcoords {505.0 246.0}
    interface-peer {e0 n3}
    interface-peer {e1 n2}
    interface-peer {e2 n4}
    interface-peer {e3 n5}
}

node n4 {
    type router
    model PC
    network-config {
	hostname Criador2
	!
	interface eth0
	 ip address 192.0.2.21/24
	 ipv6 address 2001:db8:0::21/64
	!
    }
    canvas c1
    iconcoords {503.0 119.0}
    labelcoords {503.0 151.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPClient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPClient.py
	custom-command TCPClient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.2.21'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n5 {
    type router
    model PC
    network-config {
	hostname Criador3
	!
	interface eth0
	 ip address 192.0.2.22/24
	 ipv6 address 2001:db8:0::22/64
	!
    }
    canvas c1
    iconcoords {672.0 226.0}
    labelcoords {672.0 258.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPCLient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPCLient.py
	custom-command TCPCLient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.2.22'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n6 {
    type router
    model host
    network-config {
	hostname Servidor
	!
	interface eth0
	 ip address 192.0.3.10/24
	 ipv6 address 2001:db8:1::10/64
	!
    }
    canvas c1
    iconcoords {160.0 369.0}
    labelcoords {160.0 401.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Servidor.py', )
	cmdup=('python -m SimpleHTTPServer 80', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Servidor.py
	custom-command O_Servidor.py
	config {
	from socket import *
	
	portaServidor = 12000
	
	socketServidor = socket (AF_INET, SOCK_STREAM)
	
	socketServidor.bind (('192.0.3.10', portaServidor))
	
	socketServidor.listen (1)
	
	# Python 2
	# print "O servidor esta pronto para receber"
	
	# Python 3
	print ("O servidor esta pronto para receber")
	
	while 1 :
	
	    socketConexao, endereco = socketServidor.accept ()
	
	    frase = socketConexao.recv (1024)
	
	    fraseMaiscula = frase.upper ()
	
	    socketConexao.send (fraseMaiscula)
	
	    socketConexao.close ()
	
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n7 {
    type lanswitch
    network-config {
	hostname SuporteSwitch
	!
    }
    canvas c1
    iconcoords {497.0 482.0}
    labelcoords {497.0 506.0}
    interface-peer {e0 n3}
    interface-peer {e1 n9}
    interface-peer {e2 n8}
    interface-peer {e3 n10}
}

node n8 {
    type router
    model PC
    network-config {
	hostname Suporte1
	!
	interface eth0
	 ip address 192.0.4.21/24
	 ipv6 address 2001:db8:2::21/64
	!
    }
    canvas c1
    iconcoords {329.0 481.0}
    labelcoords {329.0 513.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPClient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPClient.py
	custom-command TCPClient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.4.21'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n9 {
    type router
    model PC
    network-config {
	hostname Suporte2
	!
	interface eth0
	 ip address 192.0.4.20/24
	 ipv6 address 2001:db8:2::20/64
	!
    }
    canvas c1
    iconcoords {498.0 593.0}
    labelcoords {498.0 625.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPClient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPClient.py
	custom-command TCPClient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.4.20'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

node n10 {
    type router
    model PC
    network-config {
	hostname Suporte3
	!
	interface eth0
	 ip address 192.0.4.22/24
	 ipv6 address 2001:db8:2::22/64
	!
    }
    canvas c1
    iconcoords {684.0 476.0}
    labelcoords {684.0 508.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('TCPClient.py', )
	cmdup=('python TCPClient.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:TCPClient.py
	custom-command TCPClient.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.4.22'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n7}
}

link l1 {
    nodes {n1 n3}
    bandwidth 0
}

link l2 {
    nodes {n1 n2}
    bandwidth 0
}

link l3 {
    nodes {n1 n4}
    bandwidth 0
}

link l4 {
    nodes {n1 n5}
    bandwidth 0
}

link l5 {
    nodes {n3 n6}
    bandwidth 0
}

link l6 {
    nodes {n7 n3}
    bandwidth 0
}

link l7 {
    nodes {n7 n9}
    bandwidth 0
}

link l8 {
    nodes {n7 n8}
    bandwidth 0
}

link l9 {
    nodes {n7 n10}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

